{"version":3,"sources":["components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/Scroll.tsx","components/ErrorBoundary.tsx","components/MainPage.tsx","containers/App.tsx","action.tsx","contants.js","serviceWorker.ts","reducers.tsx","index.tsx"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","console","log","Component","MainPage","filteredRobots","filter","robot","toLowerCase","includes","searchfield","onRequestRobot","_this$props","onSearchChange","isPending","components_SearchBox","ErrorBoundary_ErrorBoundary","components_Scroll","components_CardList","App","MainPage_MainPage","connect","searchRobots","searchField","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.59efb921.chunk.js","sourcesContent":["import React from 'react';\ninterface IAppProps{\n  name:string,\n  email:string,\n  id:number\n}\n\nconst Card = ({ name, email, id }:IAppProps) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\ninterface IAppProps {\n  robots:any[]\n}\n\nconst CardList = ({ robots }:IAppProps) => {\n  return (\n    <div>\n      {\n        robots.map((user:string, i:number) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\ninterface IAppProps {\n  searchfield?:string,\n  searchChange(event:React.SyntheticEvent<HTMLInputElement>):void\n\n}\n\nconst SearchBox = ({searchChange }:IAppProps) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label=\"Search\"\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\ninterface IAppProps{\n  children?:any\n}\n\nconst Scroll = (props:IAppProps) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\r\ninterface IAppState{\r\n  hasError:boolean\r\n}\r\n\r\ninterface IAppProps{\r\n}\r\n\r\nexport default class ErrorBoundary extends Component<IAppProps, IAppState> {\r\n    constructor(props:object) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n  \r\n    static getDerivedStateFromError(error:string|null) {\r\n      // Update state so the next render will show the fallback UI.\r\n      console.log(\"There was an error\", error)\r\n      return { hasError: true };\r\n    \r\n    }\r\n  \r\n    componentDidCatch(error:any, info:any){\r\n      // You can also log the error to an error reporting service\r\n      console.log(\"There was an error\", error, info);\r\n    }\r\n  \r\n    render() {\r\n      if (this.state.hasError) {\r\n        // You can render any custom fallback UI\r\n        return <h1>Something went wrong.</h1>;\r\n      }\r\n  \r\n      return this.props.children; \r\n    }\r\n  }\r\n  ","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { isPending } from 'q';\r\n\r\nexport interface IRobot{\r\n  name:string,\r\n  email:string,\r\n  id:number\r\n\r\n}\r\ninterface IAppState{\r\nrobots: Array<IRobot>,\r\nsearchfield: string\r\n}\r\n\r\n\r\ninterface IAppProps {\r\n  onRequestRobot:() => void,\r\n  searchfield:string,\r\n  onSearchChange: (event:any) => void,\r\n  robots:any[],\r\n  isPending:boolean\r\n\r\n}\r\n\r\nexport default class MainPage extends Component<IAppProps, IAppState> {\r\n\r\n  componentDidMount() {\r\n   this.props.onRequestRobot();\r\n  }\r\n \r\n  filteredRobots = () =>{\r\n    return this.props.robots.filter( robot => {\r\n        return robot.name.toLowerCase().includes(this.props.searchfield.toLowerCase());\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const {searchfield, onSearchChange, robots, isPending}  = this.props; \r\n    return isPending ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange}/>\r\n          <ErrorBoundary>\r\n            <Scroll>\r\n              <CardList robots={this.filteredRobots()} />\r\n            </Scroll>\r\n          </ErrorBoundary>\r\n         \r\n        </div>\r\n      );\r\n  }\r\n}","import React, { Component } from 'react';\nimport {connect}  from 'react-redux';\nimport { changeSearchField, requestRobots} from '../action';\nimport './App.css';\nimport MainPage from '../components/MainPage';\n\ninterface IAppState {\n  searchRobots:{searchField:string},\n  requestRobots:{robots:any[],isPending: boolean,error: object}\n}\ninterface IAppProps{\n  onRequestRobot:()=>void,\n  searchfield:string,\n  onSearchChange: (event:any)=>void,\n  robots:any[],\n  isPending:boolean\n\n}\n\nconst mapStateToProp = (state:IAppState) => {\n  return {\n    searchfield: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  }\n\n}\n\nconst mapDispatchToProp = (dispatch:any) => {\n  return {\n    onSearchChange: (event:any) => dispatch(changeSearchField(event.target.value)),\n    onRequestRobot : () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component<IAppProps,IAppState> {\n  render() {\n   return <MainPage {...this.props} ></MainPage>\n  }\n}\n\nexport default connect(mapStateToProp, mapDispatchToProp)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './contants';\r\n\r\nexport const changeSearchField = (text:string) => ({\r\n type:CHANGE_SEARCH_FIELD,\r\n payload: text\r\n});\r\n\r\nexport const requestRobots:() => void = () => (dispatch:any) => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response=> response.json())\r\n      .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n      .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './contants';\r\n\r\nconst initialStateSearch:object = {\r\n    searchField : \"\"\r\n};\r\n\r\nexport const searchRobots = (state:object=initialStateSearch, action:{type:string,payload:object}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state,{searchField:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots:[],\r\n    error: \"\"\r\n}\r\n\r\nexport const requestRobots = (state:object=initialStateRobots, action:{type:string,payload:object})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots:action.payload, isPending:false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state,{error: action.payload, isPending:false});\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport App from './containers/App'; \nimport  * as registerServiceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots });\nconst  store = createStore(rootReducer, applyMiddleware(thunk,logger));\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>,\n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker.register();"],"sourceRoot":""}